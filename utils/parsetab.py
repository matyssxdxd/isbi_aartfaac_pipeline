
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON DEF DOLLAR ENDDEF ENDSCAN EQ IDENT REF SCAN SEMICOLONvex : vex_header blocksvex_header : IDENT EQ IDENT SEMICOLONblocks : block\n| blocks blockblock : block_header block_contentblock_header : DOLLAR IDENT SEMICOLONblock_content : block_lines\n| block_content def_block\n| block_content scan_blockdef_block : DEF word SEMICOLON block_lines ENDDEF SEMICOLONscan_block : SCAN word SEMICOLON block_lines ENDSCAN SEMICOLONblock_lines :\n| block_lines block_lineblock_line : REF DOLLAR word EQ value SEMICOLON\n| word EQ value SEMICOLONvalue : word\n| \n| value COLON word\n| value COLONword : IDENT\n| word IDENT'
    
_lr_action_items = {'IDENT':([0,6,7,8,11,16,17,18,20,21,22,24,25,26,27,28,29,30,31,32,34,35,36,37,38,42,45,],[3,-12,12,13,21,21,21,-13,28,-20,-6,28,28,21,21,-21,-12,-12,28,28,21,21,21,-15,21,28,-14,]),'$end':([1,4,5,6,9,10,11,14,15,18,22,37,43,44,45,],[0,-1,-3,-12,-4,-5,-7,-8,-9,-13,-6,-15,-10,-11,-14,]),'DOLLAR':([2,4,5,6,9,10,11,14,15,18,19,22,23,37,43,44,45,],[7,7,-3,-12,-4,-5,-7,-8,-9,-13,26,-6,-2,-15,-10,-11,-14,]),'EQ':([3,20,21,28,31,],[8,27,-20,-21,36,]),'REF':([6,11,18,22,29,30,34,35,37,45,],[-12,19,-13,-6,-12,-12,19,19,-15,-14,]),'DEF':([6,10,11,14,15,18,22,37,43,44,45,],[-12,16,-7,-8,-9,-13,-6,-15,-10,-11,-14,]),'SCAN':([6,10,11,14,15,18,22,37,43,44,45,],[-12,17,-7,-8,-9,-13,-6,-15,-10,-11,-14,]),'SEMICOLON':([12,13,21,24,25,27,28,32,33,36,38,39,40,41,42,],[22,23,-20,29,30,-17,-21,-16,37,-17,-19,43,44,45,-18,]),'ENDDEF':([18,29,34,37,45,],[-13,-12,39,-15,-14,]),'ENDSCAN':([18,30,35,37,45,],[-13,-12,40,-15,-14,]),'COLON':([21,27,28,32,33,36,38,41,42,],[-20,-17,-21,-16,38,-17,-19,38,-18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'vex':([0,],[1,]),'vex_header':([0,],[2,]),'blocks':([2,],[4,]),'block':([2,4,],[5,9,]),'block_header':([2,4,],[6,6,]),'block_content':([6,],[10,]),'block_lines':([6,29,30,],[11,34,35,]),'def_block':([10,],[14,]),'scan_block':([10,],[15,]),'block_line':([11,34,35,],[18,18,18,]),'word':([11,16,17,26,27,34,35,36,38,],[20,24,25,31,32,20,20,32,42,]),'value':([27,36,],[33,41,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> vex","S'",1,None,None,None),
  ('vex -> vex_header blocks','vex',2,'p_vex','vex.py',106),
  ('vex_header -> IDENT EQ IDENT SEMICOLON','vex_header',4,'p_vex_header','vex.py',111),
  ('blocks -> block','blocks',1,'p_blocks','vex.py',117),
  ('blocks -> blocks block','blocks',2,'p_blocks','vex.py',118),
  ('block -> block_header block_content','block',2,'p_block','vex.py',126),
  ('block_header -> DOLLAR IDENT SEMICOLON','block_header',3,'p_block_header','vex.py',132),
  ('block_content -> block_lines','block_content',1,'p_block_content','vex.py',137),
  ('block_content -> block_content def_block','block_content',2,'p_block_content','vex.py',138),
  ('block_content -> block_content scan_block','block_content',2,'p_block_content','vex.py',139),
  ('def_block -> DEF word SEMICOLON block_lines ENDDEF SEMICOLON','def_block',6,'p_def_block','vex.py',147),
  ('scan_block -> SCAN word SEMICOLON block_lines ENDSCAN SEMICOLON','scan_block',6,'p_scan_block','vex.py',153),
  ('block_lines -> <empty>','block_lines',0,'p_block_lines','vex.py',159),
  ('block_lines -> block_lines block_line','block_lines',2,'p_block_lines','vex.py',160),
  ('block_line -> REF DOLLAR word EQ value SEMICOLON','block_line',6,'p_block_line','vex.py',171),
  ('block_line -> word EQ value SEMICOLON','block_line',4,'p_block_line','vex.py',172),
  ('value -> word','value',1,'p_value','vex.py',182),
  ('value -> <empty>','value',0,'p_value','vex.py',183),
  ('value -> value COLON word','value',3,'p_value','vex.py',184),
  ('value -> value COLON','value',2,'p_value','vex.py',185),
  ('word -> IDENT','word',1,'p_word','vex.py',203),
  ('word -> word IDENT','word',2,'p_word','vex.py',204),
]
